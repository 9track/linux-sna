# Configuration for Linux-SNA sna-tools
#
# Copyright (C) 2000, Jay Schulist <jschlst@turbolinux.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#

AC_INIT(snaconfig/snaconfig.c)

# Versions of autoconf before 2.12 had bugs in autoheader that screwed up
# the production of headers/config.h.in.
AC_PREREQ(2.12)

# Get macros that we use
builtin(include, iumacros.m4)

# Generate <config.h>; note that we use a `header' subdirectory, which
# contains all include files distributed with inetutils, and an `include'
# directory, which holds those actually needed for compilation.
#
# If config.h.in needs to be regenerated (because of changes in configure.in
# or headers/acconfig.h, use the command `autoheader -l headers'.
#
AC_CONFIG_HEADER(include/config.h:headers/config.h.in)

# config.h turns this on, so make sure it's on for our tests too
CPPFLAGS=-D_BSD_SOURCE

# The list of subdirs that may be built, split into subsets (which the user
# may select for compilation at config or make time); the composite list of
# everything to build by default is defined at the end of this file.
# (These don't contain talk or talkd, which is added later if necessary)
COMMON='libcpic libnof liblar libaftp snaconfig'
SERVERS='snatchd aftpd anamed'
CLIENTS='aftp acopy aname aping atell arexec llcping sense mksense'
AC_SUBST(COMMON)
AC_SUBST(SERVERS)
AC_SUBST(CLIENTS)

# All subdirectories, whether built or not
SUBDIRS="headers $SERVERS $CLIENTS $COMMON"
AC_SUBST(SUBDIRS)

# Optional things we put into libinetutils (we use the name `LIBOBJS' because
# that's what AC_REPLACE_FUNCS uses).
LIBOBJS=''
AC_SUBST(LIBOBJS)

# Include files that we link into our own include directory from headers.
# Initialize it with the things we always want to use.
INCLUDES=''

# Files that we link from somewhere other than headers to includes .  The
# number of entries in LINK_SRCS should match that in LINK_DSTS.
LINK_SRCS=''
LINK_DSTS=''

# By default we compile both servers and clients, but see what the user wants
AC_ARG_ENABLE(servers, [  --disable-servers       don't compile servers],
	      , enable_servers=yes)
AC_ARG_ENABLE(clients, [  --disable-clients       don't compile clients],
\	      , enable_clients=yes)
# Encryption and authentication is turned off by default
AC_ARG_ENABLE(encryption, [  --enable-encryption     enable encryption],
	      , enable_encryption=no)

AC_PROG_MAKE_SET

AC_PROG_CC
AC_PROG_CPP
AC_C_CONST
AC_PROG_INSTALL
AC_PROG_YACC
AC_CHECK_TOOL(AR, ar)
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_PATH_PROG(RM, rm, rm)

AC_CHECK_HEADERS(malloc.h errno.h string.h stdarg.h termio.h termios.h \
		 stdlib.h sys/tty.h sys/utsname.h glob.h sys/ptyvar.h \
		 sys/msgbuf.h krb.h des.h netinet/in_systm.h sys/filio.h \
		 netinet/ip.h netinet/ip_icmp.h netinet/ip_var.h vis.h \
		 sys/ioctl_compat.h sys/cdefs.h utmp.h utmpx.h sys/stream.h \
		 arpa/nameser.h sys/sockio.h sys/sysmacros.h sys/param.h \
		 unistd.h sys/file.h fcntl.h sys/proc.h sys/select.h \
		 sys/time.h linux/llc.h)
AC_HEADER_TIME

AC_CHECK_LIB(nsl, inet_ntoa)
AC_CHECK_LIB(socket, getpeername)
AC_CHECK_LIB(resolv, gethostname)
AC_CHECK_LIB(bsd, revoke)

AC_CHECK_FUNCS(cgetent uname setutent_r fpathconf tcgetattr sigvec sigaction \
	       flock ftruncate wait3 memcpy bcopy bzero setsid cfsetspeed \
	       strchr waitpid seteuid setegid setreuid setregid setresuid \
	       setresgid killpg setlinebuf utimes utime)
# Functions that we will define (in libinetutils) if necessary.
AC_REPLACE_FUNCS(daemon strdup setenv memset memmove iruserok herror xstrdup getusershell)

# Use (posix) `setpgid' if it's around, otherwise assume a BSD setpgrp
AC_CHECK_FUNC(setpgid, , AC_DEFINE(setpgid, setpgrp))

# Some systems don't declare common functions (especially if they return int),
# at least in the expected header file.  Check.
IU_CHECK_DECL(fclose, [#include <stdio.h>])
IU_CHECK_DECL(pclose, [#include <stdio.h>])
IU_CHECK_DECL(getpass, [#include <unistd.h>])
IU_CHECK_DECL(getusershell, [#include <unistd.h>])
IU_CHECK_DECL(strerror, [#include <string.h>])
IU_CHECK_DECL(strchr, [#include <string.h>])

# See if getcwd accepts a size argument of 0
AC_CACHE_CHECK([if getcwd accepts a 0 size argument], inetutils_cv_getcwd_zero_size,
  AC_TRY_RUN([
#include <unistd.h>
int main () { char *wd = getcwd (0, 0); if (wd) exit (0); else exit (1); }
],
    inetutils_cv_getcwd_zero_size=yes, inetutils_cv_getcwd_zero_size=no,
    inetutils_cv_getcwd_zero_size=no))
if test "$inetutils_cv_getcwd_zero_size" = yes; then
  AC_DEFINE(HAVE_GETCWD_ZERO_SIZE)
fi

IU_CHECK_DECL(htons,
  [ #ifdef HAVE_SYS_TYPES_H
    # include <sys/types.h>
    #endif
    #ifdef HAVE_SYS_PARAM_H
    # include <sys/param.h>
    #endif
    #include <netinet/in.h> ])

if test "$ac_cv_func_setenv" = no; then
  # Our home-grown version of setenv needs to use ENVIRON
  IU_CHECK_DECL(environ,
    [ #ifdef HAVE_UNISTD_H
      # include <unistd.h>
      #endif
      #ifdef HAVE_STDLIB_H
      # include <stdlib.h>
      #endif ])
fi

# EWOULDBLOCK is more or less the BSD version of posix EAGAIN.
IU_CHECK_MACRO(EWOULDBLOCK, [#include <errno.h>], ,
  :, AC_DEFINE(EWOULDBLOCK, EAGAIN))
IU_CHECK_DECL(errno, [#include <errno.h>])

# __P is the standard name for the ansi-or-not-ansi arg-decl macro.
# We define our own version in <config.h> if the system doesn't supply one.
IU_CHECK_MACRO(__P,
  [ #ifdef HAVE_SYS_CDEFS_H
    #include <sys/cdefs.h>
    #endif ])

# If revoke hasn't been defined yet, just define a dummy version
AC_REPLACE_FUNCS(revoke)

AC_FUNC_ALLOCA
AC_FUNC_VFORK

# See whether <syslog.h> will declare special internal stuff if we define
# SYSLOG_NAMES before including it.  We check for various syslog internal macros,
# the typedef `CODE', and the variable `prioritynames'.
define([iu_syslog_includes],
  [[ #ifdef HAVE_STDLIB_H
     #include <stdlib.h>
     #endif
     #define SYSLOG_NAMES
     #include <syslog.h> ]])
IU_CHECK_MACRO(syslog internal macros,
  iu_syslog_includes,
  [LOG_MAKEPRI LOG_PRI LOG_FAC],
  IU_CHECK_TYPE(CODE,
    iu_syslog_includes,
    IU_CHECK_DECL(prioritynames,
      iu_syslog_includes,
      AC_DEFINE(HAVE_SYSLOG_INTERNAL),
      INCLUDES="$INCLUDES syslog-int.h"),
    INCLUDES="$INCLUDES syslog-int.h"),
  INCLUDES="$INCLUDES syslog-int.h")
undefine([iu_syslog_includes])

# libutil is a 4.4BSD library that defines several functions handy for
# inetutil daemons, doing such things as utmp frobbing, and pty setup.
AC_CHECK_LIB(util, logout, LIBUTIL=-lutil)
AC_SUBST(LIBUTIL)
# Look for the functions typically defined by libutil (which of course may
# not actually be in libutil), and and use our own versions if necesary.
_SAVE_LIBS="$LIBS"
LIBS="$LIBUTIL $LIBS"
AC_REPLACE_FUNCS(login logout logwtmp openpty forkpty iruserok login_tty)
LIBS="$_SAVE_LIBS"

# See if `weak refs' are possible; these make it possible (with shared
# libraries) to check for the existance of a standard function at run-time
# instead of compile time, which is very handy for distributing binary
# version programs that automatically adapt -- in inetutils case, to whether
# or not crypt is available.
IU_CHECK_WEAK_REFS

# See if there's a separate libcrypt (many systems put crypt there)
AC_CHECK_LIB(crypt, crypt, LIBCRYPT=-lcrypt)
AC_SUBST(LIBCRYPT)
# Look for the crypt function itself (in libcrypt if possible)
_SAVE_LIBS="$LIBS"
LIBS="$LIBCRYPT $LIBS"
AC_CHECK_FUNCS(crypt)
LIBS="$_SAVE_LIBS"
# ... and see if it's declared anywhere
IU_CHECK_DECL(crypt, [#include <unistd.h>])

# Look for the posix SEEK_ macros (for lseek), and if not found, try the
# similar berkeley L_ macros; if neither can be found, use the classic unix
# values.
IU_CHECK_MACRO(SEEK_ macros,
  [#include <unistd.h>], SEEK_SET SEEK_CUR SEEK_END,
  :,
  IU_CHECK_MACRO(L_ seek macros,
    [#include <unistd.h>], L_SET L_INCR L_XTND,
    AC_DEFINE(SEEK_SET, L_SET)
    AC_DEFINE(SEEK_CUR, L_INCR)
    AC_DEFINE(SEEK_END, L_XTND),
    AC_DEFINE(SEEK_SET, 0)
    AC_DEFINE(SEEK_CUR, 1)
    AC_DEFINE(SEEK_END, 2)))

# See where to find fd_set (bit-vectors for select) manipulation macros.
IU_CHECK_MACRO(fd_set macros, [#include <sys/types.h>],
  FD_ZERO FD_CLR FD_SET FD_ISSET)
if test "$inetutils_cv_macro_fd_set_macros" = no; then
  IU_CHECK_MACRO(fd_set macros in <sys/time.h>, [#include <sys/time.h>],
    FD_ZERO FD_CLR FD_SET FD_ISSET)
fi

# See if structure stat has a st_blksize member.
AC_STRUCT_ST_BLKSIZE

# See if stat includes sub-second time information (the st_?timespec form is
# from bsd, and the st_?time_usec form is used by the hurd; the latter will
# eventually be replaced by the former).
IU_CHECK_STRUCT_FIELD(stat, st_mtimespec,
  [ #include <sys/types.h>
    #include <sys/stat.h> ],
  :,
  IU_CHECK_STRUCT_FIELD(stat, st_mtime_usec,
    [ #include <sys/types.h>
      #include <sys/stat.h>]))

# See if a termcap library is available (under one of several names)
IU_LIB_TERMCAP
# If not, add a bogus version of tgetent to libinetutils, as that's the only
# function actually used (to check terminal type validity), modulo any
# dependencies from curses.
if test -z "$LIBTERMCAP"; then
  # Some packages include termcap just ;
  # for those cases, we really don't need termcap.
  LIBOBJS="$LIBOBJS stub_tgetent.o"
fi

# Look for a system `glob' function, and use our own if we can't find one (or
# if the system one is missing features we need).
sys_glob=no
if test "$ac_cv_header_glob_h" = yes; then
  AC_CHECK_LIB(glob, glob, LIBGLOB=-lglob)
  _SAVE_LIBS="$LIBS"
  LIBS="$LIBGLOB $LIBS"
  AC_CHECK_FUNC(glob,
    IU_CHECK_MACRO(system glob is ok,
      [#include <glob.h>], GLOB_BRACE GLOB_TILDE,
      sys_glob=yes))
  LIBS="$_SAVE_LIBS"
fi
if test "$sys_glob" != yes; then
  AC_CONFIG_SUBDIRS(glob)
  LINK_SRCS="$LINK_SRCS glob/glob.h"
  LINK_DSTS="$LINK_DSTS include/glob.h"
  LIBGLOB="-L../glob -lglob"
fi
AC_SUBST(LIBGLOB)

# See if the __PROGNAME variable is defined, otherwise use our own.
AC_CHECK_FUNC(__progname,
  AC_DEFINE(HAVE___PROGNAME),
  LIBOBJS="$LIBOBJS __progname.o")

# See if snprintf exists, otherwise just use a bogus version
AC_CHECK_FUNC(snprintf,
  AC_DEFINE(HAVE_SNPRINTF),
  LIBOBJS="$LIBOBJS snprintf.o")

# See if vsnprintf exists, otherwise use our own.
AC_CHECK_FUNC(vsnprintf,
  AC_DEFINE(HAVE_VSNPRINTF),
  LIBOBJS="$LIBOBJS snprintf.o")

# SERVERS_OR_CLIENTS is the default set of things to build, and holds the
# union of SERVERS and CLIENTS (we set it way down here to allow talk subdirs
# to have been added to those variables by other code).
SERVERS_OR_CLIENTS=''
if test "$enable_servers" = yes; then
  SERVERS_OR_CLIENTS="$SERVERS"
fi
if test "$enable_clients" = yes; then
  SERVERS_OR_CLIENTS="$SERVERS_OR_CLIENTS $CLIENTS"
fi
AC_SUBST(SERVERS_OR_CLIENTS)

SUBDIR_MAKEFILES="`for D in $SUBDIRS; do echo $ac_n ' '$D/Makefile$ac_c; done`"
AC_OUTPUT(Makefile config.make include/confpaths.h:headers/confpaths.h.in \
	  $SUBDIR_MAKEFILES)
